{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/comments.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","isPostOpen","onPostSelect","onOpen","useState","openPostId","setOpenPostId","className","map","post","id","title","type","classNames","onClick","handleClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","postComment","removeComment","commentId","NewCommentForm","postId","setComments","setIsError","userName","setUserName","email","setEmail","setBody","isLoading","setIsLoading","name","isInputError","setIsInputError","handleAddComments","comment","a","res","state","handleChange","event","target","value","onSubmit","preventDefault","obj","newComment","trim","Object","values","some","keys","forEach","key","htmlFor","placeholder","onChange","PostDetails","selectedPost","comments","isFormOpen","setIsFormOpen","isError","useEffect","handleGetComments","handleRemoveComment","filter","length","href","UserSelector","React","memo","users","isActive","setIsActive","selectedUser","setSelectedUser","selectRef","useRef","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleUserClick","getPosts","userId","App","setUsers","isUserSelected","setIsUserSelected","userPosts","setUserPosts","setIsPostOpen","setSelectedPost","isUserNoPosts","fetchUsers","handleGetPosts","useCallback","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.822c4303.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  isPostOpen: boolean,\n  onPostSelect: (post: Post) => void,\n  onOpen: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  isPostOpen,\n  onPostSelect,\n  onOpen,\n}) => {\n  const [openPostId, setOpenPostId] = useState(-1);\n\n  const handleClick = (post: Post) => {\n    if (openPostId === post.id) {\n      onOpen(false);\n      setOpenPostId(-1);\n    } else {\n      onPostSelect(post);\n      onOpen(true);\n      setOpenPostId(post.id);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">\n                {post.id}\n              </td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button', 'is-link', {\n                    'is-light': !(isPostOpen && openPostId === post.id),\n                  })}\n                  onClick={() => handleClick(post)}\n                >\n                  {isPostOpen && openPostId === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import classNames from 'classnames';\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\nimport { Comment, CommentData, ObjectKeys } from '../types/Comment';\nimport { postComment } from '../api/comments';\n\ntype Props = {\n  postId: number,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setIsError: React.Dispatch<React.SetStateAction<boolean>>\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n  setIsError,\n}) => {\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInputError, setIsInputError] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const handleAddComments = async (comment: CommentData) => {\n    setIsLoading(true);\n\n    const data = {\n      postId,\n      ...comment,\n    };\n\n    try {\n      const res = await postComment(data);\n\n      setComments(state => [\n        ...state,\n        res,\n      ]);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n      setBody('');\n      setIsInputError({\n        name: false,\n        email: false,\n        body: false,\n      });\n    }\n  };\n\n  const setInputError = (obj: ObjectKeys) => {\n    const keys = Object.keys(obj);\n\n    keys.forEach((key) => {\n      if (obj[key] === '') {\n        setIsInputError(state => ({\n          ...state,\n          [key]: true,\n        }));\n      }\n    });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      name: userName.trim(),\n      email: email.trim(),\n      body: body.trim(),\n    };\n\n    const values = Object.values(newComment);\n    const isValuesEmpty = values.some(value => value === '');\n\n    if (isValuesEmpty) {\n      return setInputError(newComment);\n    }\n\n    return handleAddComments(newComment);\n  };\n\n  const handleChange = (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { value, name } = event.target;\n\n    setIsInputError(state => ({\n      ...state,\n      [name]: false,\n    }));\n\n    switch (name) {\n      case 'name':\n        setUserName(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'body':\n        setBody(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleResetClick = () => {\n    setUserName('');\n    setEmail('');\n    setBody('');\n    setIsInputError({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isInputError.name,\n            })}\n            value={userName}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isInputError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isInputError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isInputError.email,\n            })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isInputError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isInputError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isInputError.body,\n            })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {isInputError.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetClick}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { getComments, removeComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const handleGetComments = async () => {\n      setIsLoading(true);\n      try {\n        const res = await getComments(selectedPost.id);\n\n        setComments(res);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    setIsFormOpen(false);\n    handleGetComments();\n  }, [selectedPost]);\n\n  const handleRemoveComment = async (commentId: number) => {\n    setComments(state => state.filter(comment => comment.id !== commentId));\n    try {\n      await removeComment(commentId);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  const handleClick = () => {\n    setIsFormOpen(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {isError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong. Reload page and try again.\n                </div>\n              )}\n\n              {comments.length === 0 && !isError && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {comments.length > 0 && !isError && (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {comments.map(comment => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a\n                          href={`mailto:${comment.email}`}\n                          data-cy=\"CommentAuthor\"\n                        >\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => handleRemoveComment(comment.id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              )}\n\n              {!isFormOpen && !isError && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={handleClick}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {isFormOpen && (\n          <NewCommentForm\n            setIsError={setIsError}\n            postId={selectedPost.id}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  onChange: (userId: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  onChange,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n  const [selectedUser, setSelectedUser] = useState('');\n  const selectRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClick = (event: MouseEvent) => {\n      if (!selectRef.current?.contains(event.target as Node)) {\n        setIsActive(false);\n      }\n    };\n\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  const handleBtnClick = () => {\n    setIsActive(state => {\n      return !state;\n    });\n  };\n\n  const handleUserClick = (user: User) => {\n    setSelectedUser(user.name);\n    setIsActive(false);\n    onChange(user.id);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={selectRef}\n      className={classNames('dropdown', {\n        'is-active': isActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleBtnClick}\n        >\n          <span>\n            {selectedUser\n              ? `${selectedUser}`\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': selectedUser === user.name,\n              })}\n              onClick={() => handleUserClick(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isUserSelected, setIsUserSelected] = useState(false);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPostOpen, setIsPostOpen] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isError, setIsError] = useState(false);\n  const isUserNoPosts = userPosts.length === 0 && isUserSelected;\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const res = await getUsers();\n\n      setUsers(res);\n    };\n\n    fetchUsers();\n  }, []);\n\n  const handleGetPosts = useCallback(async (userId: number) => {\n    setIsLoading(true);\n    setIsPostOpen(false);\n    try {\n      const res = await getPosts(userId);\n\n      setUserPosts(res);\n      setIsUserSelected(true);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const handlePostSelect = (post: Post) => setSelectedPost(post);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onChange={handleGetPosts}\n                />\n              </div>\n\n              <div\n                className=\"block\"\n                data-cy=\"MainContent\"\n              >\n                {isLoading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {!isUserSelected && !isError && (\n                      <p data-cy=\"NoSelectedUser\">\n                        No user selected\n                      </p>\n                    )}\n\n                    {isError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong. Reload page and try again.\n                      </div>\n                    )}\n\n                    {isUserNoPosts && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n\n                    {userPosts.length > 0 && (\n                      <PostsList\n                        posts={userPosts}\n                        isPostOpen={isPostOpen}\n                        onPostSelect={handlePostSelect}\n                        onOpen={setIsPostOpen}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': isPostOpen,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {isPostOpen && selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}